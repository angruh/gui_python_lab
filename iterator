class іterator:

    def first(self):
        raise NotImplementedError()

    def last(self):
        raise NotImplementedError()

    def next(self):
        raise NotImplementedError()

    def prev(self):
        raise NotImplementedError()

    def c_item(self):
        raise NotImplementedError()

    def is_done(self, index):
        raise NotImplementedError()

    def get_item(self, index):
        raise NotImplementedError()


class Iterator(іterator):
    def __init__(self, list_=None):
        self._list = list_ or []
        self._current = 0

    def first(self):
        return self._list[0]

    def last(self):
        return self._list[-1]

    def c_item(self):
        return self._list[self._current]

    def is_done(self, index):
        last_index = len(self._list) - 1
        return 0 <= index <= last_index

    def next(self):
        self._current += 1
        if not self.is_done(self._current):
            self._current = 0
        return self.c_item()

    def prev(self):
        self._current -= 1
        if not self.is_done(self._current):
            self._current = len(self._list) - 1
        return self.c_item()

    def get_item(self, index):
        if not self.is_done(index):
            raise IndexError('No element of index:',index)
        return self._list[index]


it = Iterator([1,2,3,4,5,6,7,8,'one','two','free'])
print([it.prev() for i in range(5)])
print([it.next() for i in range(5)])
